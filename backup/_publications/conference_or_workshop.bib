
@incollection{bertolacciExtendingOpenMPFacilitate2018,
  title = {Extending {{OpenMP}} to {{Facilitate Loop Optimization}}},
  booktitle = {Evolving {{OpenMP}} for {{Evolving Architectures}}},
  author = {Bertolacci, Ian and Strout, Michelle Mills and de Supinski, Bronis R. and Scogland, Thomas R. W. and Davis, Eddie C. and Olschanowsky, Catherine},
  editor = {de Supinski, Bronis R. and Valero-Lara, Pedro and Martorell, Xavier and Mateo Bellido, Sergi and Labarta, Jesus},
  date = {2018},
  year = {2018},
  volume = {11128},
  pages = {53--65},
  publisher = {{Springer International Publishing}},
  location = {{Cham}},
  doi = {10.1007/978-3-319-98521-3_4},
  url = {http://link.springer.com/10.1007/978-3-319-98521-3_4},
  urldate = {2019-10-02},
  abstract = {OpenMP provides several mechanisms to specify parallel source-code transformations. Unfortunately, many compilers perform these transformations early in the translation process, often before performing traditional sequential optimizations, which can limit the effectiveness of those optimizations. Further, OpenMP semantics preclude performing those transformations in some cases prior to the parallel transformations, which can limit overall application performance.},
  file = {/home/ian/Zotero/storage/7JFGYPL5/Bertolacci et al. - 2018 - Extending OpenMP to Facilitate Loop Optimization.pdf;/home/ian/Zotero/storage/DG856XHZ/Bertolacci et al. - 2018 - Extending OpenMP to Facilitate Loop Optimization.pdf},
  isbn = {978-3-319-98520-6 978-3-319-98521-3},
  langid = {english},
  options = {useprefix=true}
}

@inproceedings{bertolacciIdentifyingSchedulingLoop2016,
  title = {Identifying and {{Scheduling Loop Chains Using Directives}}},
  booktitle = {2016 {{Third Workshop}} on {{Accelerator Programming Using Directives}} ({{WACCPD}})},
  author = {Bertolacci, I. J. and Strout, M. M. and Guzik, S. and Riley, J. and Olschanowsky, C.},
  date = {2016-11},
  year = {2016},
  pages = {57--67},
  doi = {10.1109/WACCPD.2016.010},
  abstract = {Exposing opportunities for parallelization while explicitly managing data locality is the primary challenge to porting and optimizing existing computational science simulation codes to improve performance and accuracy. OpenMP provides many mechanisms for expressing parallelism, but it primarily remains the programmer's responsibility to group computations to improve data locality. The loopchain abstraction, where data access patterns are included with the specification of parallel loops, provides compilers with sufficient information to automate the parallelism versus data locality tradeoff. In this paper, we present a loop chain pragma and an extension to the omp for to enable the specification of loop chains and high-level specifications of schedules on loop chains. We show example usage of the extensions, describe their implementation, and show preliminary performance results for some simple examples.},
  eventtitle = {2016 {{Third Workshop}} on {{Accelerator Programming Using Directives}} ({{WACCPD}})},
  file = {/home/ian/Zotero/storage/G3INSQ56/Bertolacci et al. - 2016 - Identifying and Scheduling Loop Chains Using Direc.pdf;/home/ian/Zotero/storage/HBK5V2K4/Bertolacci et al. - 2016 - Identifying and Scheduling Loop Chains Using Direc.pdf;/home/ian/Zotero/storage/QPDTT7ED/7836581.html;/home/ian/Zotero/storage/W7ISXA2N/7836581.html},
  keywords = {abstract data types,application program interfaces,compilers,computational science simulation code optimization,data access patterns,data handling,data locality management,Electronic mail,Fuses,Grammar,information,information retrieval,loop chain identification,loop chain pragma,loop chain scheduling,loopchain abstraction,OpenMP,parallel loops,parallel programming,porting,Processor scheduling,program compilers,Programming,Schedules,scheduling}
}

@inproceedings{bertolacciParameterizedDiamondTiling2015,
  ids = {10.1145/2751205.2751226},
  title = {Parameterized {{Diamond Tiling}} for {{Stencil Computations}} with {{Chapel Parallel Iterators}}},
  booktitle = {Proceedings of the 29th {{ACM}} on {{International Conference}} on {{Supercomputing}}},
  author = {Bertolacci, Ian J. and Olschanowsky, Catherine and Harshbarger, Ben and Chamberlain, Bradford L. and Wonnacott, David G. and Strout, Michelle Mills},
  date = {2015},
  year = {2015},
  pages = {197--206},
  publisher = {{ACM}},
  location = {{Newport Beach, California, USA}},
  doi = {10.1145/2751205.2751226},
  url = {http://doi.acm.org/10.1145/2751205.2751226},
  urldate = {2019-10-02},
  abstract = {Stencil computations figure prominently in the core kernels of many scientific computations, such as partial differential equation solvers. Parallel scaling of stencil computations can be significantly improved on multicore processors using advanced tiling techniques that include the time dimension, such as diamond tiling. Such techniques are difficult to include in general purpose optimizing compilers because of the need for inter-procedural pointer and array data-flow analysis, plus the need to tune scheduling strategies and tile size parameters for each pairing of stencil computation and machine. Since a fully automatic solution is problematic, we propose to provide parameterized space and time tiling iterators through libraries. Ideally, the execution schedule or tiling code will be expressed orthogonally to the computation. This supports code reuse, easier tuning, and improved programmer productivity. Chapel iterators provide this capability implicitly. We present an advanced, parameterized tiling approach that we have implemented using Chapel parallel iterators. We show how such iterators can be used by programmers in stencil computations with multiple spatial dimensions. We also demonstrate that these new iterators provide better scaling than a traditional data parallel schedule.},
  eventtitle = {International {{Conference}} on {{Supercomputing}}},
  file = {/home/ian/Zotero/storage/ZJNTY97G/Bertolacci et al. - 2015 - Parameterized Diamond Tiling for Stencil Computati.pdf},
  isbn = {978-1-4503-3559-1},
  keywords = {chapel,diamond tiling,parallel iterators,separation of concerns,stencil computations},
  numpages = {10},
  place = {Newport Beach, California, USA},
  series = {{{ICS}} '15}
}
